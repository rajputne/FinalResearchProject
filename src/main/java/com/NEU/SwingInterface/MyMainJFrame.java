/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.NEU.SwingInterface;

import static org.elasticsearch.index.query.QueryBuilders.*;
import com.NEU.Business.Contract;
import com.NEU.Business.DefinedTerms;
import com.NEU.Business.Section;
import com.NEU.Utilities.Utility;

import java.awt.Component;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import opennlp.tools.sentdetect.SentenceDetectorME;
import opennlp.tools.sentdetect.SentenceModel;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.parser.ParseContext;
import org.apache.tika.parser.pdf.PDFParser;
import org.apache.tika.sax.BodyContentHandler;

import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import org.elasticsearch.action.get.GetResponse;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.index.query.QueryBuilder;
import org.elasticsearch.search.SearchHit;

import org.elasticsearch.transport.client.PreBuiltTransportClient;

/**
 *
 * @author User
 */
public class MyMainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MyMainJFrame
     */
    Contract contract;
    TransportClient client;
    IndexResponse response;

    public static String extractTableOfContents(String documentText) {
        int tableOfContentsStart = 0;

        tableOfContentsStart = documentText.indexOf("TABLE OF CONTENTS");

        if (tableOfContentsStart == -1) {
            tableOfContentsStart = documentText.indexOf("T A B L E   O F   C O N T E N T S");
        }
        int tableOfContentsEnd = documentText.indexOf("SCHEDULES");
        String tableOfContents = documentText.substring(tableOfContentsStart, tableOfContentsEnd);

        return tableOfContents;
    }

    public MyMainJFrame() {
        initComponents();
        contract = new Contract();
        DefaultTableModel dtm = (DefaultTableModel) sectionJTable.getModel();
        int rowCount = sectionJTable.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            dtm.removeRow(i);
        }
        try {
            client = new PreBuiltTransportClient(Settings.EMPTY)
                    .addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName("localhost"), 9300));
        } catch (UnknownHostException ex) {
            Logger.getLogger(MyMainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public static boolean isExcel;

    public String identifyFileTypeUsingFilesProbeContentType(final String fileName) {
        String fileType = "Undetermined";
        final File file = new File(fileName);
        try {
            fileType = Files.probeContentType(file.toPath());
        } catch (IOException ioException) {
            System.out.println(
                    "ERROR: Unable to determine file type for " + fileName
                    + " due to exception " + ioException);
        }
        return fileType;
    }
    String path = null;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainJPanel = new javax.swing.JPanel();
        openCSATFile = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sectionJTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        sectionContentJTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        definedTermsJTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        elasticSearchJTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        topicListJTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txtContent = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        openCSATFile.setText("Open Contracts");
        openCSATFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCSATFileActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setText("Smart Contract Demo");

        sectionJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Key", "Value"
            }
        ));
        sectionJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sectionJTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(sectionJTable);

        sectionContentJTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Key", "Value"
            }
        ));
        sectionContentJTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sectionContentJTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(sectionContentJTable1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("Section Detector Table");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel4.setText("Sentences Table");

        definedTermsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Key", "Value"
            }
        ));
        definedTermsJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                definedTermsJTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(definedTermsJTable);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel5.setText("Elasticsearch 5.6 Result");

        jButton2.setText("Get All Values from Elasticsearch");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Put in Elastic Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        elasticSearchJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Key", "Value"
            }
        ));
        elasticSearchJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                elasticSearchJTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(elasticSearchJTable);
        if (elasticSearchJTable.getColumnModel().getColumnCount() > 0) {
            elasticSearchJTable.getColumnModel().getColumn(1).setResizable(false);
            elasticSearchJTable.getColumnModel().getColumn(1).setHeaderValue("Value");
        }

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel6.setText("Defined Terms");

        javax.swing.GroupLayout mainJPanelLayout = new javax.swing.GroupLayout(mainJPanel);
        mainJPanel.setLayout(mainJPanelLayout);
        mainJPanelLayout.setHorizontalGroup(
            mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainJPanelLayout.createSequentialGroup()
                .addGroup(mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainJPanelLayout.createSequentialGroup()
                        .addGap(324, 324, 324)
                        .addComponent(jLabel1))
                    .addGroup(mainJPanelLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addGap(32, 32, 32)
                        .addGroup(mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane3)
                            .addComponent(jScrollPane5))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainJPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(139, 139, 139))
            .addGroup(mainJPanelLayout.createSequentialGroup()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 784, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(openCSATFile))
            .addGroup(mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainJPanelLayout.createSequentialGroup()
                    .addContainerGap(404, Short.MAX_VALUE)
                    .addComponent(jLabel6)
                    .addGap(351, 351, 351)))
        );
        mainJPanelLayout.setVerticalGroup(
            mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainJPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(39, 39, 39)
                .addGroup(mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openCSATFile))
                .addGap(32, 32, 32)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addGroup(mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainJPanelLayout.createSequentialGroup()
                        .addGap(0, 7, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainJPanelLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addGap(29, 29, 29))
            .addGroup(mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mainJPanelLayout.createSequentialGroup()
                    .addGap(167, 167, 167)
                    .addComponent(jLabel6)
                    .addContainerGap(469, Short.MAX_VALUE)))
        );

        getContentPane().add(mainJPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        topicListJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Topics"
            }
        ));
        topicListJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                topicListJTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(topicListJTable);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 200, 380, 170));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("Topics");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 160, -1, -1));
        getContentPane().add(txtContent, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 670, 320, -1));

        jButton3.setText("Search");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 670, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openCSATFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCSATFileActionPerformed
        // TODO add your handling code here:

        JFileChooser fileChooser = new JFileChooser("C:\\Users\\User\\Documents\\NetBeansProjects\\TikaSmartContractor\\Contracts");
        //fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            System.out.println("Selected file: " + selectedFile.getAbsolutePath());
            path = selectedFile.getAbsolutePath();

            try {
                String fileBool = identifyFileTypeUsingFilesProbeContentType(selectedFile.getName());
                if (!fileBool.contains("pdf")) {
                    JOptionPane.showMessageDialog(null, "The file choosen is not a pdf file.");
                    isExcel = false;
                } else {
                    JOptionPane.showMessageDialog(null, "You have selected a pdf file.");
                    isExcel = true;
                }

                jTextField1.setText(path);

                FileInputStream inputstream = null;
                try {
                    // TODO code application logic here

                    BodyContentHandler handler = new BodyContentHandler(-1);
                    Metadata metadata = new Metadata();
                    inputstream = new FileInputStream(new File(path));
                    ParseContext pcontext = new ParseContext();
                    //parsing the document using PDF parser
                    PDFParser pdfparser = new PDFParser();
                    pdfparser.parse(inputstream, handler, metadata, pcontext);
                    //getting the content of the document
                    System.out.println("Contents of the PDF :" + handler.toString());
                    //getting metadata of the document
                    String pdfContent = handler.toString();
                    pdfContent = pdfContent.replaceAll("\\n", "");
                    pdfContent = pdfContent.replaceAll("\\t", "");
                    pdfContent = pdfContent.toString().replaceAll("(/[^\\da-zA-Z.]/)", "");

                    //Extract Table of Contents
                    String toc = extractTableOfContents(pdfContent);
                    contract.setTableOfContent(toc);
                    System.out.println(toc);
                    ArrayList<String> keys = new ArrayList<>();
                    Boolean containArticle = toc.contains("Article");
                    Boolean containARTICLE = toc.contains("ARTICLE");
                    //For Contract1

                    if (containArticle) {
                        String articleSplit[] = toc.split("Article");
                        for (String article : articleSplit) {

                            String sectionSplit[] = article.split("Section");
                            System.out.println(sectionSplit.length);
                            for (String section : sectionSplit) {
                                System.out.println(section);
                                keys.add(section);
                            }

                        }
                        System.out.println(articleSplit.length);
                    }

                    //For Contract 2
                    if (containARTICLE) {
                        String articleSplit[] = toc.split("ARTICLE");
                        for (String article : articleSplit) {
                            String sectionSplit[] = article.split("Section");
                            System.out.println(sectionSplit.length);
                            for (String section : sectionSplit) {
                                System.out.println(section);
                                keys.add(section);
                            }
                        }
                        System.out.println(articleSplit.length);
                    }

                    String documentText1[] = pdfContent.split("SCHEDULES");

                    String fullDocument = documentText1[1];
                    fullDocument = fullDocument.replaceAll(" +", " ");

                    for (int i = 0; i < keys.size(); i++) {
                        try {
                            String prevKeys = keys.get(i);
                            String afterKeys = keys.get(i + 1);

                            String prevKeysList[] = prevKeys.split("  ");
                            String my = prevKeysList[1].replaceAll("[^a-zA-Z]", "");
                            String finalPrevKeys = prevKeysList[0] + "  " + my;

                            String afterKeysList[] = afterKeys.split("  ");
                            my = afterKeysList[1].replaceAll("[^a-zA-Z]", "");
                            String finalafterKeys = afterKeysList[0] + "  " + my;

                            // prevKeys = prevKeys.replaceAll("\n", "");
                            //afterKeys = afterKeys.replaceAll("\n", "");
                            // prevKeys = prevKeys.replaceAll("[^a-zA-Z]+", " ");
                            // afterKeys = afterKeys.replaceAll("[^a-zA-Z]+", " ");
                            prevKeys = prevKeys.trim().replaceAll(" +", " ");
                            afterKeys = afterKeys.trim().replaceAll(" +", " ");
                            prevKeys = prevKeys.substring(0, prevKeys.length() - 3);
                            afterKeys = afterKeys.substring(0, afterKeys.length() - 3);

                            //For Contract 1
                            int prevKeysIndex = fullDocument.indexOf(prevKeys);
                            int afterKeysIndex = fullDocument.indexOf(afterKeys);

                            //Search the Numbers not the text works but accuracy will not be great can generate false positive
                            //int prevKeysIndex = fullDocument.indexOf(prevKeysList[0]);
                            //int afterKeysIndex = fullDocument.indexOf(afterKeysList[0]);
                            if (prevKeysIndex < afterKeysIndex) {
                                String value = fullDocument.substring(prevKeysIndex, afterKeysIndex);
                                value = value.replaceAll("\\[", "").replaceAll("\\]", "");
                                value = value.substring(prevKeys.length(), value.length());
                                value = value.replaceAll("\\n", "");

                                if (prevKeys.contains("Increased Cost and Reduced Return; Capital Adequacy; Reserves on Eurodollar Rate Loans")) {
                                    System.out.println("Problem");
                                }

                                if (prevKeys.toLowerCase().contains("defined term")) {
                                    ArrayList<DefinedTerms> myMap = parseString(fullDocument);
                                    Section mysec = new Section();
                                    mysec.setSectionNumber(prevKeys);
                                    mysec.setSectionContent(value);
                                    contract.setDefinedTermList(myMap);

                                } else {
                                    Section section = new Section();
                                    section.setSectionNumber(prevKeys);
                                    section.setSectionContent(value);
                                    contract.getSectionList().add(section);
                                }

                            }
                        } catch (Exception e) {
                            System.out.print(e.getMessage());
                        }
                    }
                    contract=Utility.doTopicModelling(contract);
                    PrintWriter out = new PrintWriter("MyIndexex1Sample.json");
                    populateTable();
                    populateTableDefinedTerms();
                    FileWriter fw11 = new FileWriter("MyContractText.txt");
                    BufferedWriter bw11 = new BufferedWriter(fw11);
                    bw11.write(pdfContent);
                    bw11.close();
                    fw11.close();
                    System.out.println("Metadata of the PDF:");
                    String[] metadataNames = metadata.names();
                    for (String name : metadataNames) {
                        System.out.println(name + " : " + metadata.get(name));
                    }
                } catch (FileNotFoundException ex) {
         
                } finally {
                    try {
                        inputstream.close();
                    } catch (IOException ex) {
                        
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "You have selected an invalid file");
            }
        }
    }//GEN-LAST:event_openCSATFileActionPerformed
    private void populateTableDefinedTerms() {
        DefaultTableModel dtm = (DefaultTableModel) definedTermsJTable.getModel();
        int rowCount = definedTermsJTable.getRowCount();
        dtm.setRowCount(0);
        for (int i = rowCount - 1; i >= 0; i--) {
            dtm.removeRow(i);
        }

        for (DefinedTerms vs : contract.getDefinedTermList()) {
            Object row[] = new Object[2];
            row[0] = vs.getTerm();
            row[1] = vs.getDefinition();
            //row[0] = vs.getPulse();
            dtm.addRow(row);
        }
    }

    private void sectionJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sectionJTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = sectionJTable.getSelectedRow();
        if (selectedRow >= 0) {
            InputStream is = null;
            try {
                Section vs = (Section) sectionJTable.getValueAt(selectedRow, 0);
                String sectionContent = vs.getSectionContent();

                // always start with a model, a model is learned from training data
                is = new FileInputStream("C:\\Users\\User\\Documents\\NetBeansProjects\\TikaSmartContractor\\en-sent.bin");
                SentenceModel model = new SentenceModel(is);
                SentenceDetectorME sdetector = new SentenceDetectorME(model);
                String sentences[] = sdetector.sentDetect(sectionContent);

                // String paraGraphExtract[] = sectionContent.split("\n\n");
                DefaultTableModel dtm = (DefaultTableModel) sectionContentJTable1.getModel();
                int rowCount = sectionContentJTable1.getRowCount();
                for (int i = rowCount - 1; i >= 0; i--) {
                    dtm.removeRow(i);
                }
                int i = 0;
                for (String m : sentences) {
                    i++;

                    Object row[] = new Object[2];
                    row[0] = i;
                    row[1] = m;
                    //row[0] = vs.getPulse();
                    dtm.addRow(row);
                }
                resizeColumnWidth(sectionContentJTable1);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MyMainJFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MyMainJFrame.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    is.close();
                } catch (IOException ex) {
                    Logger.getLogger(MyMainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        //JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_sectionJTableMouseClicked
    public void resizeColumnWidth(JTable table) {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 15; // Min width
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 1, width);
            }
            if (width > 300) {
                width = 300;
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }
    private void sectionContentJTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sectionContentJTable1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_sectionContentJTable1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        // TODO add your handling code here:
        ObjectMapper mapper = new ObjectMapper();
        try {
            // Convert object to JSON string and save into a file directly
            mapper.writeValue(new File("contract.json"), contract);

            // Convert object to JSON string
            String jsonInString = mapper.writeValueAsString(contract);
            System.out.println(jsonInString);
            byte[] json = mapper.writeValueAsBytes(contract);
            // Convert object to JSON string and pretty print
            jsonInString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(contract);
            System.out.println(jsonInString);
            client = new PreBuiltTransportClient(Settings.EMPTY)
                    .addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName("127.0.0.1"), 9300))
                    .addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName("127.0.0.1"), 9300));

            response = client.prepareIndex("contract", "contract", "1")
                    .setSource(jsonInString, XContentType.JSON)
                    .get();
            JOptionPane.showMessageDialog(null, "Inserted in Elasticserach", "Warning", JOptionPane.INFORMATION_MESSAGE);
        } catch (JsonMappingException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void definedTermsJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_definedTermsJTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_definedTermsJTableMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        GetResponse response = client.prepareGet("contract", "contract", "1").get();
        Map<String, Object> source = response.getSource();

        System.out.println("------------------------------");
        System.out.println("Index: " + response.getIndex());
        System.out.println("Type: " + response.getType());
        System.out.println("Id: " + response.getId());
        System.out.println("Version: " + response.getVersion());
        System.out.println(source);
        elasticSearchpopulateTable(source);
        System.out.println("------------------------------");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void elasticSearchpopulateTable(Map source) {
        DefaultTableModel dtm = (DefaultTableModel) elasticSearchJTable.getModel();
        int rowCount = elasticSearchJTable.getRowCount();
        dtm.setRowCount(0);
        for (int i = rowCount - 1; i >= 0; i--) {
            dtm.removeRow(i);
        }

        Iterator<Map.Entry<String, String>> itr = source.entrySet().iterator();

        while (itr.hasNext()) {
            Map.Entry<String, String> entry = itr.next();

            Object row[] = new Object[2];
            row[0] = entry.getKey();
            row[1] = entry.getValue();
            //row[0] = vs.getPulse();
            dtm.addRow(row);
        }

    }

    

    public void populateTopic(Contract contract) {
        DefaultTableModel dtm = (DefaultTableModel) topicListJTable.getModel();
        int rowCount = topicListJTable.getRowCount();
        dtm.setRowCount(0);
        for (int i = rowCount - 1; i >= 0; i--) {
            dtm.removeRow(i);
        }

        for (String vs : contract.getTopicList()) {
            Object row[] = new Object[1];
            row[0] = vs;

            dtm.addRow(row);
        }

    }
    private void topicListJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_topicListJTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_topicListJTableMouseClicked

    private void elasticSearchJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_elasticSearchJTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_elasticSearchJTableMouseClicked


    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String text = txtContent.getText();
        QueryBuilder qb = wildcardQuery("sectionList", text + "*");
        qb.toString();
        System.out.println(qb.getName());

        SearchResponse response = null;
        try {
            response = client.prepareSearch()
                    .setQuery(qb).execute().actionGet();
        } catch (Throwable e) {

        }
        Set<String> result = new HashSet<String>();
        for (SearchHit hit : response.getHits()) {
            Long id = hit.field("sectionList").<Long>getValue();
            result.add(String.valueOf(id));
        }

    }//GEN-LAST:event_jButton3ActionPerformed
    public static ArrayList<DefinedTerms> parseString(String documentText) throws FileNotFoundException {
        System.out.println("----INDEXOF----");
        documentText = documentText.toLowerCase();
        int definedTermsStart = documentText.indexOf("article 1");
        int definedTermsEnd = documentText.indexOf("article 2");
        ArrayList<DefinedTerms> definedTerms = new ArrayList<>();
        int start = documentText.indexOf('“', definedTermsStart);
        int end = documentText.indexOf('”', start);
        int delimiter = -1;
        int count = 0;

        while (start != -1 && end < definedTermsEnd) {

            System.out.println(documentText.substring(start + 1, end));

            delimiter = documentText.indexOf(".", end + 1);

            System.out.println(documentText.substring(end + 1, delimiter));

            System.out.println();
            DefinedTerms dt = new DefinedTerms();
            dt.setTerm(documentText.substring(start + 1, end));
            dt.setDefinition(documentText.substring(end + 1, delimiter));
            //obj.put(documentText.substring(start + 1, end), documentText.substring(end + 1, delimiter));
            definedTerms.add(dt);
            String term = documentText.substring(start + 1, end);
            count++;

            start = documentText.indexOf('“', end + 1);
            end = documentText.indexOf('”', start);

        }
        PrintWriter out = new PrintWriter("DefinedTerms.json");

        System.out.println("stop");
        // node.close();
        return definedTerms;
    }

    private void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) sectionJTable.getModel();
        int rowCount = sectionJTable.getRowCount();
        dtm.setRowCount(0);
        for (int i = rowCount - 1; i >= 0; i--) {
            dtm.removeRow(i);
        }

        for (Section vs : contract.getSectionList()) {
            Object row[] = new Object[2];
            row[0] = vs;
            row[1] = vs.getSectionContent();
            //row[0] = vs.getPulse();
            dtm.addRow(row);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyMainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyMainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyMainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyMainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyMainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable definedTermsJTable;
    private javax.swing.JTable elasticSearchJTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JPanel mainJPanel;
    private javax.swing.JButton openCSATFile;
    private javax.swing.JTable sectionContentJTable1;
    private javax.swing.JTable sectionJTable;
    private javax.swing.JTable topicListJTable;
    private javax.swing.JTextField txtContent;
    // End of variables declaration//GEN-END:variables
}
